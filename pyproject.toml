[tool.poetry]
name = "package-name"
version = "1.4.1"
description = "Package description"
license = "MIT"
authors = ["Author Name <author.email@example.com>"]
readme = "README.md"
packages = [
  { include = "package_name", "from" = "src" }
]

repository = "https://github.com/github-user/package-name"
keywords = ["Package Name"]
classifiers = [
    "Topic :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
]

[tool.poetry.dependencies]
python = "^3.11"
requests = "^2.31.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"


[tool.poetry.group.dev.dependencies]
black = "^23.9.1"
pylint = "^2.17.5"

[tool.black]
line-length = 100

[tool.pylint.main]
score = "n"
no-docstring-rgx = "^_|^test_"

[tool.pylint."messages control"]
disable = ["missing-module-docstring"]

[tool.pytest.ini_options]
minversion = "7.4.0"
pythonpath = "src"
addopts = "-vv --import-mode=importlib"

[tool.poetry.scripts]
package-name = "package_name.cli:run"

[tool.poe.tasks.test]
help = "Default: Run application test suites that support coverage"
sequence = ["test-coverage"]

[tool.poe.tasks.test-all]
help = "Run all application test suites"
sequence = ["test-unit", "test-integration", "test-e2e"]

[tool.poe.tasks.test-coverage]
help = "Run application test suites that support coverage"
cmd = "pytest --cov=src/package_name --cov-fail-under=90 --cov=src/package_name --cov-branch --cov-report term-missing:skip-covered tests/unit tests/integration"

[tool.poe.tasks.test-e2e]
help = "Run e2e tests only"
cmd = "pytest tests/e2e"

[tool.poe.tasks.test-integration]
help = "Run integration tests only (with coverage)"
cmd = "pytest --cov=src/package_name --cov-fail-under=90 --cov=src/package_name --cov-branch --cov-report term-missing:skip-covered tests/integration"

[tool.poe.tasks.test-unit]
help = "Run unit tests only (without coverage)"
cmd = "pytest tests/unit"

[tool.poe.tasks.check]
help = "Check code quality"
sequence = ["format", "lint"]

[tool.poe.tasks.lint]
help = "Run all linting tools against codebase"
sequence = ["lint-pylint"]

[tool.poe.tasks.lint-pylint]
help = "Lint Python source code and tests with pylint"
cmd = "pylint --verbose --score y src tests"

[tool.poe.tasks.format]
help = "Run all formatting tools against codebase"
sequence = ["format-black", "format-prettier"]

[tool.poe.tasks.format-black]
help = "Run black against Python source code"
cmd = "black --check --line-length 100 ."

[tool.poe.tasks.format-prettier]
help = "Run prettier against non-Python code"
cmd = "npx --yes prettier@3.0.3 . --no-config --check"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"